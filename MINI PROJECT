import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import LabelEncoder

# Step 1: Create a Sample Dataset
data = {
    'Product_Category': ['Electronics', 'Clothing', 'Electronics', 'Furniture', 'Furniture', 
                         'Clothing', 'Electronics', 'Furniture', 'Clothing', 'Furniture'],
    'Brand': ['BrandA', 'BrandB', 'BrandA', 'BrandC', 'BrandD', 
              'BrandB', 'BrandA', 'BrandC', 'BrandB', 'BrandD'],
    'Demand': [120, 80, 150, 60, 70, 100, 200, 40, 90, 50],
    'Base_Price': [100, 50, 120, 200, 180, 70, 140, 220, 60, 210],
    'Final_Price': [130, 70, 150, 250, 210, 85, 170, 270, 75, 240]
}
df = pd.DataFrame(data)

# Step 2: Preprocessing
# Encode categorical data
le_category = LabelEncoder()
le_brand = LabelEncoder()
df['Product_Category'] = le_category.fit_transform(df['Product_Category'])
df['Brand'] = le_brand.fit_transform(df['Brand'])

# Define features and target
X = df[['Product_Category', 'Brand', 'Demand', 'Base_Price']]
y = df['Final_Price']

# Step 3: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Train a Regression Model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 5: Predictions
y_pred = model.predict(X_test)

# Step 6: Evaluate the Model
mse = mean_squared_error(y_test, y_pred)
if len(y_test) > 1:
    r2 = r2_score(y_test, y_pred)
    print("Mean Squared Error:", mse)
    print("R2 Score:", r2)
else:
    print("Mean Squared Error:", mse)
    print("R2 Score cannot be calculated with less than 2 samples in the test set.")

# Step 7: Predict Price for a New Product
new_product = pd.DataFrame({
    'Product_Category': [le_category.transform(['Furniture'])[0]],
    'Brand': [le_brand.transform(['BrandC'])[0]],
    'Demand': [90],
    'Base_Price': [190]
})
predicted_price = model.predict(new_product)
print("Predicted Price for the new product:", predicted_price[0])
